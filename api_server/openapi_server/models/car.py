# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Car(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, administration=None, driver_name=None, driver_skill=None, driver_employee_number=None, license_plate=None, token=None, division=None, business_unit=None):  # noqa: E501
        """Car - a model defined in OpenAPI

        :param id: The id of this Car.  # noqa: E501
        :type id: str
        :param administration: The administration of this Car.  # noqa: E501
        :type administration: str
        :param driver_name: The driver_name of this Car.  # noqa: E501
        :type driver_name: str
        :param driver_skill: The driver_skill of this Car.  # noqa: E501
        :type driver_skill: str
        :param driver_employee_number: The driver_employee_number of this Car.  # noqa: E501
        :type driver_employee_number: str
        :param license_plate: The license_plate of this Car.  # noqa: E501
        :type license_plate: str
        :param token: The token of this Car.  # noqa: E501
        :type token: str
        :param division: The division of this Car.  # noqa: E501
        :type division: str
        :param business_unit: The business_unit of this Car.  # noqa: E501
        :type business_unit: str
        """
        self.openapi_types = {
            'id': str,
            'administration': str,
            'driver_name': str,
            'driver_skill': str,
            'driver_employee_number': str,
            'license_plate': str,
            'token': str,
            'division': str,
            'business_unit': str
        }

        self.attribute_map = {
            'id': 'id',
            'administration': 'administration',
            'driver_name': 'driver_name',
            'driver_skill': 'driver_skill',
            'driver_employee_number': 'driver_employee_number',
            'license_plate': 'license_plate',
            'token': 'token',
            'division': 'division',
            'business_unit': 'business_unit'
        }

        self._id = id
        self._administration = administration
        self._driver_name = driver_name
        self._driver_skill = driver_skill
        self._driver_employee_number = driver_employee_number
        self._license_plate = license_plate
        self._token = token
        self._division = division
        self._business_unit = business_unit

    @classmethod
    def from_dict(cls, dikt) -> 'Car':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Car of this Car.  # noqa: E501
        :rtype: Car
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Car.


        :return: The id of this Car.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Car.


        :param id: The id of this Car.
        :type id: str
        """

        self._id = id

    @property
    def administration(self):
        """Gets the administration of this Car.


        :return: The administration of this Car.
        :rtype: str
        """
        return self._administration

    @administration.setter
    def administration(self, administration):
        """Sets the administration of this Car.


        :param administration: The administration of this Car.
        :type administration: str
        """

        self._administration = administration

    @property
    def driver_name(self):
        """Gets the driver_name of this Car.


        :return: The driver_name of this Car.
        :rtype: str
        """
        return self._driver_name

    @driver_name.setter
    def driver_name(self, driver_name):
        """Sets the driver_name of this Car.


        :param driver_name: The driver_name of this Car.
        :type driver_name: str
        """
        if driver_name is None:
            raise ValueError("Invalid value for `driver_name`, must not be `None`")  # noqa: E501

        self._driver_name = driver_name

    @property
    def driver_skill(self):
        """Gets the driver_skill of this Car.


        :return: The driver_skill of this Car.
        :rtype: str
        """
        return self._driver_skill

    @driver_skill.setter
    def driver_skill(self, driver_skill):
        """Sets the driver_skill of this Car.


        :param driver_skill: The driver_skill of this Car.
        :type driver_skill: str
        """

        self._driver_skill = driver_skill

    @property
    def driver_employee_number(self):
        """Gets the driver_employee_number of this Car.


        :return: The driver_employee_number of this Car.
        :rtype: str
        """
        return self._driver_employee_number

    @driver_employee_number.setter
    def driver_employee_number(self, driver_employee_number):
        """Sets the driver_employee_number of this Car.


        :param driver_employee_number: The driver_employee_number of this Car.
        :type driver_employee_number: str
        """

        self._driver_employee_number = driver_employee_number

    @property
    def license_plate(self):
        """Gets the license_plate of this Car.


        :return: The license_plate of this Car.
        :rtype: str
        """
        return self._license_plate

    @license_plate.setter
    def license_plate(self, license_plate):
        """Sets the license_plate of this Car.


        :param license_plate: The license_plate of this Car.
        :type license_plate: str
        """

        self._license_plate = license_plate

    @property
    def token(self):
        """Gets the token of this Car.


        :return: The token of this Car.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Car.


        :param token: The token of this Car.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def division(self):
        """Gets the division of this Car.


        :return: The division of this Car.
        :rtype: str
        """
        return self._division

    @division.setter
    def division(self, division):
        """Sets the division of this Car.


        :param division: The division of this Car.
        :type division: str
        """

        self._division = division

    @property
    def business_unit(self):
        """Gets the business_unit of this Car.


        :return: The business_unit of this Car.
        :rtype: str
        """
        return self._business_unit

    @business_unit.setter
    def business_unit(self, business_unit):
        """Sets the business_unit of this Car.


        :param business_unit: The business_unit of this Car.
        :type business_unit: str
        """

        self._business_unit = business_unit
