# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Engineer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links=None, id=None, token=None, administration=None, name=None, role=None, employee_number=None, license_plate=None, division=None, business_unit=None):  # noqa: E501
        """Engineer - a model defined in OpenAPI

        :param links: The links of this Engineer.  # noqa: E501
        :type links: object
        :param id: The id of this Engineer.  # noqa: E501
        :type id: str
        :param token: The token of this Engineer.  # noqa: E501
        :type token: str
        :param administration: The administration of this Engineer.  # noqa: E501
        :type administration: str
        :param name: The name of this Engineer.  # noqa: E501
        :type name: str
        :param role: The role of this Engineer.  # noqa: E501
        :type role: str
        :param employee_number: The employee_number of this Engineer.  # noqa: E501
        :type employee_number: str
        :param license_plate: The license_plate of this Engineer.  # noqa: E501
        :type license_plate: str
        :param division: The division of this Engineer.  # noqa: E501
        :type division: str
        :param business_unit: The business_unit of this Engineer.  # noqa: E501
        :type business_unit: str
        """
        self.openapi_types = {
            'links': object,
            'id': str,
            'token': str,
            'administration': str,
            'name': str,
            'role': str,
            'employee_number': str,
            'license_plate': str,
            'division': str,
            'business_unit': str
        }

        self.attribute_map = {
            'links': '_links',
            'id': 'id',
            'token': 'token',
            'administration': 'administration',
            'name': 'name',
            'role': 'role',
            'employee_number': 'employee_number',
            'license_plate': 'license_plate',
            'division': 'division',
            'business_unit': 'business_unit'
        }

        self._links = links
        self._id = id
        self._token = token
        self._administration = administration
        self._name = name
        self._role = role
        self._employee_number = employee_number
        self._license_plate = license_plate
        self._division = division
        self._business_unit = business_unit

    @classmethod
    def from_dict(cls, dikt) -> 'Engineer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Engineer of this Engineer.  # noqa: E501
        :rtype: Engineer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this Engineer.


        :return: The links of this Engineer.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Engineer.


        :param links: The links of this Engineer.
        :type links: object
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this Engineer.


        :return: The id of this Engineer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Engineer.


        :param id: The id of this Engineer.
        :type id: str
        """

        self._id = id

    @property
    def token(self):
        """Gets the token of this Engineer.


        :return: The token of this Engineer.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Engineer.


        :param token: The token of this Engineer.
        :type token: str
        """

        self._token = token

    @property
    def administration(self):
        """Gets the administration of this Engineer.


        :return: The administration of this Engineer.
        :rtype: str
        """
        return self._administration

    @administration.setter
    def administration(self, administration):
        """Sets the administration of this Engineer.


        :param administration: The administration of this Engineer.
        :type administration: str
        """

        self._administration = administration

    @property
    def name(self):
        """Gets the name of this Engineer.


        :return: The name of this Engineer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Engineer.


        :param name: The name of this Engineer.
        :type name: str
        """

        self._name = name

    @property
    def role(self):
        """Gets the role of this Engineer.


        :return: The role of this Engineer.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Engineer.


        :param role: The role of this Engineer.
        :type role: str
        """

        self._role = role

    @property
    def employee_number(self):
        """Gets the employee_number of this Engineer.


        :return: The employee_number of this Engineer.
        :rtype: str
        """
        return self._employee_number

    @employee_number.setter
    def employee_number(self, employee_number):
        """Sets the employee_number of this Engineer.


        :param employee_number: The employee_number of this Engineer.
        :type employee_number: str
        """

        self._employee_number = employee_number

    @property
    def license_plate(self):
        """Gets the license_plate of this Engineer.


        :return: The license_plate of this Engineer.
        :rtype: str
        """
        return self._license_plate

    @license_plate.setter
    def license_plate(self, license_plate):
        """Sets the license_plate of this Engineer.


        :param license_plate: The license_plate of this Engineer.
        :type license_plate: str
        """

        self._license_plate = license_plate

    @property
    def division(self):
        """Gets the division of this Engineer.


        :return: The division of this Engineer.
        :rtype: str
        """
        return self._division

    @division.setter
    def division(self, division):
        """Sets the division of this Engineer.


        :param division: The division of this Engineer.
        :type division: str
        """

        self._division = division

    @property
    def business_unit(self):
        """Gets the business_unit of this Engineer.


        :return: The business_unit of this Engineer.
        :rtype: str
        """
        return self._business_unit

    @business_unit.setter
    def business_unit(self, business_unit):
        """Sets the business_unit of this Engineer.


        :param business_unit: The business_unit of this Engineer.
        :type business_unit: str
        """

        self._business_unit = business_unit
# flake8: noqa
