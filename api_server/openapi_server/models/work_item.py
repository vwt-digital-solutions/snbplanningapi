# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.geometry import Geometry
from openapi_server import util

from openapi_server.models.geometry import Geometry  # noqa: E501

class WorkItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links=None, l2_guid=None, administration=None, category=None, task_type=None, project=None, status=None, description=None, start_timestamp=None, end_timestamp=None, last_updated=None, resolve_before_timestamp=None, city=None, zip=None, house=None, street=None, extra=None, is_geocoded=None, geometry=None, employee_name=None, employee_number=None, order_id=None, sub_order_id=None, stagnation=None):  # noqa: E501
        """WorkItem - a model defined in OpenAPI

        :param links: The links of this WorkItem.  # noqa: E501
        :type links: object
        :param l2_guid: The l2_guid of this WorkItem.  # noqa: E501
        :type l2_guid: str
        :param administration: The administration of this WorkItem.  # noqa: E501
        :type administration: str
        :param category: The category of this WorkItem.  # noqa: E501
        :type category: str
        :param task_type: The task_type of this WorkItem.  # noqa: E501
        :type task_type: str
        :param project: The project of this WorkItem.  # noqa: E501
        :type project: str
        :param status: The status of this WorkItem.  # noqa: E501
        :type status: str
        :param description: The description of this WorkItem.  # noqa: E501
        :type description: str
        :param start_timestamp: The start_timestamp of this WorkItem.  # noqa: E501
        :type start_timestamp: str
        :param end_timestamp: The end_timestamp of this WorkItem.  # noqa: E501
        :type end_timestamp: str
        :param last_updated: The last_updated of this WorkItem.  # noqa: E501
        :type last_updated: str
        :param resolve_before_timestamp: The resolve_before_timestamp of this WorkItem.  # noqa: E501
        :type resolve_before_timestamp: str
        :param city: The city of this WorkItem.  # noqa: E501
        :type city: str
        :param zip: The zip of this WorkItem.  # noqa: E501
        :type zip: str
        :param house: The house of this WorkItem.  # noqa: E501
        :type house: str
        :param street: The street of this WorkItem.  # noqa: E501
        :type street: str
        :param extra: The extra of this WorkItem.  # noqa: E501
        :type extra: str
        :param is_geocoded: The is_geocoded of this WorkItem.  # noqa: E501
        :type is_geocoded: bool
        :param geometry: The geometry of this WorkItem.  # noqa: E501
        :type geometry: Geometry
        :param employee_name: The employee_name of this WorkItem.  # noqa: E501
        :type employee_name: str
        :param employee_number: The employee_number of this WorkItem.  # noqa: E501
        :type employee_number: str
        :param order_id: The order_id of this WorkItem.  # noqa: E501
        :type order_id: str
        :param sub_order_id: The sub_order_id of this WorkItem.  # noqa: E501
        :type sub_order_id: str
        :param stagnation: The stagnation of this WorkItem.  # noqa: E501
        :type stagnation: bool
        """
        self.openapi_types = {
            'links': object,
            'l2_guid': str,
            'administration': str,
            'category': str,
            'task_type': str,
            'project': str,
            'status': str,
            'description': str,
            'start_timestamp': str,
            'end_timestamp': str,
            'last_updated': str,
            'resolve_before_timestamp': str,
            'city': str,
            'zip': str,
            'house': str,
            'street': str,
            'extra': str,
            'is_geocoded': bool,
            'geometry': Geometry,
            'employee_name': str,
            'employee_number': str,
            'order_id': str,
            'sub_order_id': str,
            'stagnation': bool
        }

        self.attribute_map = {
            'links': '_links',
            'l2_guid': 'l2_guid',
            'administration': 'administration',
            'category': 'category',
            'task_type': 'task_type',
            'project': 'project',
            'status': 'status',
            'description': 'description',
            'start_timestamp': 'start_timestamp',
            'end_timestamp': 'end_timestamp',
            'last_updated': 'last_updated',
            'resolve_before_timestamp': 'resolve_before_timestamp',
            'city': 'city',
            'zip': 'zip',
            'house': 'house',
            'street': 'street',
            'extra': 'extra',
            'is_geocoded': 'is_geocoded',
            'geometry': 'geometry',
            'employee_name': 'employee_name',
            'employee_number': 'employee_number',
            'order_id': 'order_id',
            'sub_order_id': 'sub_order_id',
            'stagnation': 'stagnation'
        }

        self._links = links
        self._l2_guid = l2_guid
        self._administration = administration
        self._category = category
        self._task_type = task_type
        self._project = project
        self._status = status
        self._description = description
        self._start_timestamp = start_timestamp
        self._end_timestamp = end_timestamp
        self._last_updated = last_updated
        self._resolve_before_timestamp = resolve_before_timestamp
        self._city = city
        self._zip = zip
        self._house = house
        self._street = street
        self._extra = extra
        self._is_geocoded = is_geocoded
        self._geometry = geometry
        self._employee_name = employee_name
        self._employee_number = employee_number
        self._order_id = order_id
        self._sub_order_id = sub_order_id
        self._stagnation = stagnation

    @classmethod
    def from_dict(cls, dikt) -> 'WorkItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WorkItem of this WorkItem.  # noqa: E501
        :rtype: WorkItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this WorkItem.


        :return: The links of this WorkItem.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this WorkItem.


        :param links: The links of this WorkItem.
        :type links: object
        """

        self._links = links

    @property
    def l2_guid(self):
        """Gets the l2_guid of this WorkItem.


        :return: The l2_guid of this WorkItem.
        :rtype: str
        """
        return self._l2_guid

    @l2_guid.setter
    def l2_guid(self, l2_guid):
        """Sets the l2_guid of this WorkItem.


        :param l2_guid: The l2_guid of this WorkItem.
        :type l2_guid: str
        """

        self._l2_guid = l2_guid

    @property
    def administration(self):
        """Gets the administration of this WorkItem.


        :return: The administration of this WorkItem.
        :rtype: str
        """
        return self._administration

    @administration.setter
    def administration(self, administration):
        """Sets the administration of this WorkItem.


        :param administration: The administration of this WorkItem.
        :type administration: str
        """

        self._administration = administration

    @property
    def category(self):
        """Gets the category of this WorkItem.


        :return: The category of this WorkItem.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this WorkItem.


        :param category: The category of this WorkItem.
        :type category: str
        """

        self._category = category

    @property
    def task_type(self):
        """Gets the task_type of this WorkItem.


        :return: The task_type of this WorkItem.
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this WorkItem.


        :param task_type: The task_type of this WorkItem.
        :type task_type: str
        """

        self._task_type = task_type

    @property
    def project(self):
        """Gets the project of this WorkItem.


        :return: The project of this WorkItem.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this WorkItem.


        :param project: The project of this WorkItem.
        :type project: str
        """

        self._project = project

    @property
    def status(self):
        """Gets the status of this WorkItem.


        :return: The status of this WorkItem.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkItem.


        :param status: The status of this WorkItem.
        :type status: str
        """

        self._status = status

    @property
    def description(self):
        """Gets the description of this WorkItem.


        :return: The description of this WorkItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkItem.


        :param description: The description of this WorkItem.
        :type description: str
        """

        self._description = description

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this WorkItem.


        :return: The start_timestamp of this WorkItem.
        :rtype: str
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this WorkItem.


        :param start_timestamp: The start_timestamp of this WorkItem.
        :type start_timestamp: str
        """

        self._start_timestamp = start_timestamp

    @property
    def end_timestamp(self):
        """Gets the end_timestamp of this WorkItem.


        :return: The end_timestamp of this WorkItem.
        :rtype: str
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        """Sets the end_timestamp of this WorkItem.


        :param end_timestamp: The end_timestamp of this WorkItem.
        :type end_timestamp: str
        """

        self._end_timestamp = end_timestamp

    @property
    def last_updated(self):
        """Gets the last_updated of this WorkItem.


        :return: The last_updated of this WorkItem.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this WorkItem.


        :param last_updated: The last_updated of this WorkItem.
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def resolve_before_timestamp(self):
        """Gets the resolve_before_timestamp of this WorkItem.


        :return: The resolve_before_timestamp of this WorkItem.
        :rtype: str
        """
        return self._resolve_before_timestamp

    @resolve_before_timestamp.setter
    def resolve_before_timestamp(self, resolve_before_timestamp):
        """Sets the resolve_before_timestamp of this WorkItem.


        :param resolve_before_timestamp: The resolve_before_timestamp of this WorkItem.
        :type resolve_before_timestamp: str
        """

        self._resolve_before_timestamp = resolve_before_timestamp

    @property
    def city(self):
        """Gets the city of this WorkItem.


        :return: The city of this WorkItem.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this WorkItem.


        :param city: The city of this WorkItem.
        :type city: str
        """

        self._city = city

    @property
    def zip(self):
        """Gets the zip of this WorkItem.


        :return: The zip of this WorkItem.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this WorkItem.


        :param zip: The zip of this WorkItem.
        :type zip: str
        """

        self._zip = zip

    @property
    def house(self):
        """Gets the house of this WorkItem.


        :return: The house of this WorkItem.
        :rtype: str
        """
        return self._house

    @house.setter
    def house(self, house):
        """Sets the house of this WorkItem.


        :param house: The house of this WorkItem.
        :type house: str
        """

        self._house = house

    @property
    def street(self):
        """Gets the street of this WorkItem.


        :return: The street of this WorkItem.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this WorkItem.


        :param street: The street of this WorkItem.
        :type street: str
        """

        self._street = street

    @property
    def extra(self):
        """Gets the extra of this WorkItem.


        :return: The extra of this WorkItem.
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this WorkItem.


        :param extra: The extra of this WorkItem.
        :type extra: str
        """

        self._extra = extra

    @property
    def is_geocoded(self):
        """Gets the is_geocoded of this WorkItem.


        :return: The is_geocoded of this WorkItem.
        :rtype: bool
        """
        return self._is_geocoded

    @is_geocoded.setter
    def is_geocoded(self, is_geocoded):
        """Sets the is_geocoded of this WorkItem.


        :param is_geocoded: The is_geocoded of this WorkItem.
        :type is_geocoded: bool
        """

        self._is_geocoded = is_geocoded

    @property
    def geometry(self):
        """Gets the geometry of this WorkItem.


        :return: The geometry of this WorkItem.
        :rtype: Geometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this WorkItem.


        :param geometry: The geometry of this WorkItem.
        :type geometry: Geometry
        """

        self._geometry = geometry

    @property
    def employee_name(self):
        """Gets the employee_name of this WorkItem.


        :return: The employee_name of this WorkItem.
        :rtype: str
        """
        return self._employee_name

    @employee_name.setter
    def employee_name(self, employee_name):
        """Sets the employee_name of this WorkItem.


        :param employee_name: The employee_name of this WorkItem.
        :type employee_name: str
        """

        self._employee_name = employee_name

    @property
    def employee_number(self):
        """Gets the employee_number of this WorkItem.


        :return: The employee_number of this WorkItem.
        :rtype: str
        """
        return self._employee_number

    @employee_number.setter
    def employee_number(self, employee_number):
        """Sets the employee_number of this WorkItem.


        :param employee_number: The employee_number of this WorkItem.
        :type employee_number: str
        """

        self._employee_number = employee_number

    @property
    def order_id(self):
        """Gets the order_id of this WorkItem.


        :return: The order_id of this WorkItem.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this WorkItem.


        :param order_id: The order_id of this WorkItem.
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def sub_order_id(self):
        """Gets the sub_order_id of this WorkItem.


        :return: The sub_order_id of this WorkItem.
        :rtype: str
        """
        return self._sub_order_id

    @sub_order_id.setter
    def sub_order_id(self, sub_order_id):
        """Sets the sub_order_id of this WorkItem.


        :param sub_order_id: The sub_order_id of this WorkItem.
        :type sub_order_id: str
        """

        self._sub_order_id = sub_order_id

    @property
    def stagnation(self):
        """Gets the stagnation of this WorkItem.


        :return: The stagnation of this WorkItem.
        :rtype: bool
        """
        return self._stagnation

    @stagnation.setter
    def stagnation(self, stagnation):
        """Sets the stagnation of this WorkItem.


        :param stagnation: The stagnation of this WorkItem.
        :type stagnation: bool
        """

        self._stagnation = stagnation
# flake8: noqa
