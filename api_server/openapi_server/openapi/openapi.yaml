openapi: 3.0.2
info:
  contact:
    email: opensource@vwt.digital
    name: VolkerWessels Telecom - Digital Ambition Team
    url: https://vwt-digital.github.io/
  description: An API for the snbplanning
  license:
    name: GNU GPLv3
    url: https://www.gnu.org/licenses/gpl.txt
  title: SNBPlanning API
  version: 1.0.0
  x-audience: company-internal
  x-api-id: e2a63575-f436-4e31-8f34-fadbad0d9693
servers:
- url: /
paths:
  /cars:
    get:
      description: Get a list of all cars and their driver information.
      operationId: cars_list
      parameters:
      - description: The license_plate of the car.
        explode: true
        in: query
        name: license_plate
        required: false
        schema:
          type: string
        style: form
      - description: Time offset range in hours for retrieving entries
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 168
          type: integer
        style: form
      - description: Business unit the car and driver belong to.
        explode: true
        in: query
        name: business_unit
        required: false
        schema:
          default: service
          enum:
          - service
          - nls
          - ftth
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarsList'
          description: |
            Successful response Returns an array of locations with info
      security:
      - OAuth2AzureAD:
        - snbplanningapi.planner
      summary: Get car info
      x-openapi-router-controller: openapi_server.controllers.cars_controller
    post:
      description: Post a list of all car geolocations with info
      operationId: cars_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
          description: Successful POST
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: There is an error with the data posted, for instance, a car
            with the specified hyrde token already exists.
      security:
      - OAuth2AzureAD:
        - snbplanningapi.editor
      summary: Post car info
      x-openapi-router-controller: openapi_server.controllers.cars_controller
  /cars/distances:
    get:
      description: |
        Get a list of Hyrde car tokens along with the distance and travel time from the specified point. Optionally, a list of car tokens can be supplied, for which to calculate the distance. If no list is supplied, this endpoint will query all cars. Only returns tokens linked to cars.
        When passing a list of car tokens, make sure that 1. All tokens are linked to a car info. 2. All cars have been updated within the time determined by
           offset (defaults to 168 hours, or 1 week)

        Otherwise, these cars will not be accounted for in the response.
      operationId: car_distances_list
      parameters:
      - description: The workitem for which to find the nearest car locations
        explode: true
        in: query
        name: work_item
        required: true
        schema:
          type: string
        style: form
      - description: |
          A comma separated list of car tokens to for which to calculate the distance.
        explode: true
        in: query
        name: cars
        required: false
        schema:
          type: string
        style: form
      - description: Time offset range in hours for retrieving entries
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 168
          type: integer
        style: form
      - description: Sort results by distance or travel time.
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: travel_time
          enum:
          - travel_time
          - distance
          type: string
        style: form
      - description: Total numer of distances to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 3
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarDistances'
          description: Successful response - returns an array of distances
      security:
      - OAuth2AzureAD:
        - snbplanningapi.planner
      summary: Get car distances from a point or workitem
      x-openapi-router-controller: openapi_server.controllers.cars_controller
  /cars/locations:
    get:
      description: |
        Get a list of all car geolocations, with their linked Hyrde tokens.
      operationId: car_locations_list
      parameters:
      - description: Time offset range in hours for retrieving entries
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 168
          type: integer
        style: form
      - description: Business unit the car and driver belong to.
        explode: true
        in: query
        name: business_unit
        required: false
        schema:
          default: service
          enum:
          - service
          - nls
          - ftth
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarLocations'
          description: Successful response - returns an array of locations
          headers:
            Cache-Control:
              description: Header describing the cache policy for this endpoints.
                Defaults to a 300 seconds private cache.
              explode: false
              schema:
                default: private, max-age=300
                type: string
              style: simple
      security:
      - OAuth2AzureAD:
        - snbplanningapi.read
      summary: Get car locations
      x-openapi-router-controller: openapi_server.controllers.cars_controller
  /engineers:
    get:
      description: Get a list of all engineers.
      operationId: engineers_list
      parameters:
      - description: Business unit the engineer belongs to.
        explode: true
        in: query
        name: business_unit
        required: false
        schema:
          enum:
          - service
          - nls
          - ftth
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EngineersList'
          description: |
            Successful response Returns an array of engineers with info
      security:
      - OAuth2AzureAD:
        - snbplanningapi.planner
      summary: Get info of all engineers
      x-openapi-router-controller: openapi_server.controllers.engineers_controller
  /engineers/{engineerId}:
    get:
      description: Get the info of an engineer.
      operationId: get_engineer
      parameters:
      - description: The id of the engineer to retrieve
        explode: false
        in: path
        name: engineerId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Engineer'
          description: |
            Successful response Returns an array of engineers with info
      security:
      - OAuth2AzureAD:
        - snbplanningapi.planner
      summary: Get info of a single engineer
      x-openapi-router-controller: openapi_server.controllers.engineers_controller
  /plannings:
    get:
      description: This endpoint returns planning-items for the next morning.
      operationId: list_planning_items
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanningItemsList'
          description: OK
          headers:
            Cache-Control:
              description: Header describing the cache policy for this endpoints.
                Defaults to a 300 seconds private cache.
              explode: false
              schema:
                default: private, max-age=300
                type: string
              style: simple
      security:
      - OAuth2AzureAD:
        - snbplanningapi.planner
      summary: Retrieve planning items from the planning engine
      x-openapi-router-controller: openapi_server.controllers.plannings_controller
      x-eac-ignore: true
  /tokens:
    get:
      description: List of tokens
      operationId: list_tokens
      parameters:
      - explode: true
        in: query
        name: assigned
        required: false
        schema:
          type: boolean
        style: form
      - description: Time offset range in hours for retrieving entries
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 168
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokensList'
          description: OK
      security:
      - OAuth2AzureAD:
        - snbplanningapi.planner
      summary: Get a list of tokens
      x-openapi-router-controller: openapi_server.controllers.cars_controller
  /workitems:
    get:
      description: List of work items
      operationId: list_work_items
      parameters:
      - description: |
          Select only active workitems. When set to false, retrieves all workitems
        explode: true
        in: query
        name: active
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          The business_unit to filter on. Defaults to service, to return all workitems for Service.
        explode: true
        in: query
        name: business_unit
        required: false
        schema:
          default: service
          enum:
          - service
          - nls
          - ftth
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkItemsList'
          description: OK
          headers:
            Cache-Control:
              description: Header describing the cache policy for this endpoints.
                Defaults to a 300 seconds private cache.
              explode: false
              schema:
                default: private, max-age=300
                type: string
              style: simple
      security:
      - OAuth2AzureAD:
        - snbplanningapi.planner
      summary: Get a list of work items
      x-openapi-router-controller: openapi_server.controllers.workitems_controller
      x-eac-ignore: true
  /workitems/{subOrderId}:
    get:
      description: Get a single work item
      operationId: get_work_item
      parameters:
      - description: |
          Select a workitem on it's suborder-id
        explode: false
        in: path
        name: subOrderId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkItem'
          description: OK
          headers:
            Cache-Control:
              description: Header describing the cache policy for this endpoints.
                Defaults to a 300 seconds private cache.
              explode: false
              schema:
                default: private, max-age=300
                type: string
              style: simple
      security:
      - OAuth2AzureAD:
        - snbplanningapi.planner
      summary: Get a work item
      x-openapi-router-controller: openapi_server.controllers.workitems_controller
      x-eac-ignore: true
components:
  schemas:
    Error:
      description: An error message.
      properties:
        status:
          example: "400"
          type: string
        detail:
          example: Could not create object, an object with that id already exists.
          type: string
      type: object
    CarDistances:
      description: Collection of car distances.
      example:
        items:
        - token: vwt/hyrde/01202321
          distance: 5.0
          travel_time: 1200
        - token: vwt/hyrde/01202321
          distance: 5.0
          travel_time: 1200
      properties:
        items:
          items:
            $ref: '#/components/schemas/CarDistance'
          type: array
      type: object
    CarDistance:
      description: Hyrde token with distance and traveltime.
      example:
        token: vwt/hyrde/01202321
        distance: 5.0
        travel_time: 1200
      properties:
        token:
          description: the Hyrde car token
          type: string
        distance:
          description: distance in km.
          format: decimal
          type: number
        travel_time:
          description: Estimated travel time in seconds.
          format: int32
          type: integer
      type: object
    CarLocations:
      description: Collection of car locations.
      example:
        type: FeatureCollection
        features:
        - type: Feature
          geometry:
            type: Point
            coordinates:
            - 5.3
            - 52.6
          properties:
            token: vwt/hyrde/1234
        - type: Feature
          geometry:
            type: Point
            coordinates:
            - 5.4
            - 52.5
          properties: {}
      properties:
        type:
          type: string
        features:
          items:
            $ref: '#/components/schemas/CarLocation'
          type: array
      required:
      - features
      - type
      type: object
    CarLocation:
      description: The location of a car.
      example:
        type: Feature
        geometry:
          type: Point
          coordinates:
          - 5.3
          - 52.6
        properties:
          token: vwt/hyrde/token/104510
      properties:
        geometry:
          $ref: '#/components/schemas/Geometry'
        type:
          type: string
        properties:
          type: object
      required:
      - geometry
      - properties
      - type
      type: object
    Geometry:
      description: Geometry element
      example:
        type: Point
        coordinates:
        - 5.2
        - 52.4
      properties:
        type:
          enum:
          - Point
          type: string
        coordinates:
          items:
            type: number
          type: array
      required:
      - coordinates
      - type
      type: object
    CarsList:
      description: A list of Cars.
      example:
        items:
        - driver_name: Billy Gates
          division: "90117"
          license_plate: AA-123-BB
          administration: Klantteam Noord
          id: "123456789"
          driver_skill: Metende
          business_unit: NLS
          driver_employee_number: "1234"
          token: vwt/hyrde/12345
        - driver_name: Billy Gates
          division: "90117"
          license_plate: AA-123-BB
          administration: Klantteam Noord
          id: "123456789"
          driver_skill: Metende
          business_unit: NLS
          driver_employee_number: "1234"
          token: vwt/hyrde/12345
      properties:
        items:
          items:
            $ref: '#/components/schemas/Car'
          type: array
      required:
      - items
      type: object
    Car:
      description: Information on a car and their driver
      example:
        driver_name: Billy Gates
        division: "90117"
        license_plate: AA-123-BB
        administration: Klantteam Noord
        id: "123456789"
        driver_skill: Metende
        business_unit: NLS
        driver_employee_number: "1234"
        token: vwt/hyrde/12345
      properties:
        id:
          example: "123456789"
          type: string
        administration:
          example: Klantteam Noord
          type: string
        driver_name:
          example: Billy Gates
          readOnly: true
          type: string
        driver_skill:
          example: Metende
          type: string
        driver_employee_number:
          example: "1234"
          type: string
        license_plate:
          example: AA-123-BB
          readOnly: true
          type: string
        token:
          example: vwt/hyrde/12345
          type: string
        division:
          example: "90117"
          readOnly: true
          type: string
        business_unit:
          example: NLS
          readOnly: true
          type: string
      required:
      - token
    EngineersList:
      description: A list of Engineers.
      example:
        _links: '{}'
        items:
        - driver_name: Billy Gates
          division: "90117"
          license_plate: AA-123-BB
          _links: '{}'
          administration: Klantteam Noord
          id: "123456789"
          driver_skill: Metende
          business_unit: NLS
          driver_employee_number: "1234"
        - driver_name: Billy Gates
          division: "90117"
          license_plate: AA-123-BB
          _links: '{}'
          administration: Klantteam Noord
          id: "123456789"
          driver_skill: Metende
          business_unit: NLS
          driver_employee_number: "1234"
      properties:
        _links:
          properties:
            self:
              properties:
                href:
                  example: /engineers?business_unit=nls
                  type: string
        items:
          items:
            $ref: '#/components/schemas/Engineer'
          type: array
      required:
      - items
      type: object
    Engineer:
      description: Information about an Engineer
      example:
        driver_name: Billy Gates
        division: "90117"
        license_plate: AA-123-BB
        _links: '{}'
        administration: Klantteam Noord
        id: "123456789"
        driver_skill: Metende
        business_unit: NLS
        driver_employee_number: "1234"
      properties:
        _links:
          properties:
            self:
              properties:
                href:
                  example: /engineers/1
                  type: string
        id:
          example: "123456789"
          type: string
        administration:
          example: Klantteam Noord
          nullable: true
          type: string
        driver_name:
          example: Billy Gates
          readOnly: true
          type: string
        driver_skill:
          example: Metende
          nullable: true
          type: string
        driver_employee_number:
          example: "1234"
          type: string
        license_plate:
          example: AA-123-BB
          nullable: true
          readOnly: true
          type: string
        division:
          example: "90117"
          readOnly: true
          type: string
        business_unit:
          example: NLS
          readOnly: true
          type: string
    TokensList:
      description: List of hyrde car tokens
      example:
        items:
        - license: AB123C
          id: vwt/hyrde/token/20120
        - license: AB123C
          id: vwt/hyrde/token/20120
      properties:
        items:
          items:
            $ref: '#/components/schemas/Token'
          type: array
      required:
      - items
      type: object
    Token:
      description: A hyrde car token and its' linked information
      example:
        license: AB123C
        id: vwt/hyrde/token/20120
      properties:
        id:
          example: vwt/hyrde/token/20120
          type: string
        license:
          example: AB123C
          type: string
      type: object
    WorkItemsList:
      example:
        items:
        - zip: zip
          last_updated: 2000-01-23T04:56:07.000+00:00
          _links: '{}'
          start_timestamp: 2000-01-23T04:56:07.000+00:00
          city: city
          administration: administration
          project: project
          description: description
          employee_name: employee_name
          resolve_before_timestamp: 2000-01-23T04:56:07.000+00:00
          sub_order_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          house: house
          end_timestamp: 2000-01-23T04:56:07.000+00:00
          is_geocoded: true
          street: street
          extra: extra
          stagnation: true
          employee_number: employee_number
          geometry:
            type: Point
            coordinates:
            - 5.2
            - 52.4
          l2_guid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          category: category
          task_type: task_type
          order_id: order_id
          status: status
        - zip: zip
          last_updated: 2000-01-23T04:56:07.000+00:00
          _links: '{}'
          start_timestamp: 2000-01-23T04:56:07.000+00:00
          city: city
          administration: administration
          project: project
          description: description
          employee_name: employee_name
          resolve_before_timestamp: 2000-01-23T04:56:07.000+00:00
          sub_order_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          house: house
          end_timestamp: 2000-01-23T04:56:07.000+00:00
          is_geocoded: true
          street: street
          extra: extra
          stagnation: true
          employee_number: employee_number
          geometry:
            type: Point
            coordinates:
            - 5.2
            - 52.4
          l2_guid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          category: category
          task_type: task_type
          order_id: order_id
          status: status
      properties:
        items:
          items:
            $ref: '#/components/schemas/WorkItem'
          type: array
    WorkItem:
      description: Link2 work item
      example:
        zip: zip
        last_updated: 2000-01-23T04:56:07.000+00:00
        _links: '{}'
        start_timestamp: 2000-01-23T04:56:07.000+00:00
        city: city
        administration: administration
        project: project
        description: description
        employee_name: employee_name
        resolve_before_timestamp: 2000-01-23T04:56:07.000+00:00
        sub_order_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        house: house
        end_timestamp: 2000-01-23T04:56:07.000+00:00
        is_geocoded: true
        street: street
        extra: extra
        stagnation: true
        employee_number: employee_number
        geometry:
          type: Point
          coordinates:
          - 5.2
          - 52.4
        l2_guid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        category: category
        task_type: task_type
        order_id: order_id
        status: status
      properties:
        _links:
          properties:
            self:
              properties:
                href:
                  example: /workitems/00fbd832-4242-4242-4242-7fe9b03a3f0f
                  type: string
        l2_guid:
          format: uuid
          type: string
        administration:
          type: string
        category:
          type: string
        task_type:
          type: string
        project:
          type: string
        status:
          type: string
        description:
          type: string
        start_timestamp:
          format: date-time
          type: string
        end_timestamp:
          format: date-time
          type: string
        last_updated:
          format: date-time
          type: string
        resolve_before_timestamp:
          format: date-time
          type: string
        city:
          type: string
        zip:
          type: string
        house:
          type: string
        street:
          type: string
        extra:
          type: string
        is_geocoded:
          type: boolean
        geometry:
          $ref: '#/components/schemas/Geometry'
        employee_name:
          type: string
        employee_number:
          type: string
        order_id:
          type: string
        sub_order_id:
          format: uuid
          type: string
        stagnation:
          type: boolean
    PlanningItemsList:
      description: A collection of planned items.
      example:
        _links: '{}'
        items:
        - _embedded: '{}'
        - _embedded: '{}'
      properties:
        _links:
          properties:
            self:
              properties:
                href:
                  example: /plannings
                  type: string
        items:
          items:
            $ref: '#/components/schemas/PlanningItem'
          type: array
    PlanningItem:
      description: A single planned item generated by the SNBPlanning Engine.
      example:
        _embedded: '{}'
      properties:
        _embedded:
          properties:
            engineer:
              $ref: '#/components/schemas/Engineer'
            workitem:
              $ref: '#/components/schemas/WorkItem'
  securitySchemes:
    OAuth2AzureAD:
      description: OAuth through Azure AD
      flows:
        authorizationCode:
          authorizationUrl: https://azuread.url
          scopes:
            snbplanningapi.read: View
            snbplanningapi.planner: Planner
            snbplanningapi.editor: Editor
          tokenUrl: https://azuread.url
      type: oauth2
      x-tokenInfoFunc: openapi_server.controllers.security_controller_.info_from_OAuth2AzureAD
      x-scopeValidateFunc: connexion.decorators.security.validate_scope
x-zally-ignore:
- 101
- 104
- 105
- 176
