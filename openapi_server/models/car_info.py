# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class CarInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, license_plate=None, driver_name=None, token=None):  # noqa: E501
        """CarInfo - a model defined in OpenAPI

        :param id: The id of this CarInfo.  # noqa: E501
        :type id: float
        :param license_plate: The license_plate of this CarInfo.  # noqa: E501
        :type license_plate: str
        :param driver_name: The driver_name of this CarInfo.  # noqa: E501
        :type driver_name: str
        :param token: The token of this CarInfo.  # noqa: E501
        :type token: str
        """
        self.openapi_types = {
            'id': float,
            'license_plate': str,
            'driver_name': str,
            'token': str
        }

        self.attribute_map = {
            'id': 'id',
            'license_plate': 'license_plate',
            'driver_name': 'driver_name',
            'token': 'token'
        }

        self._id = id
        self._license_plate = license_plate
        self._driver_name = driver_name
        self._token = token

    @classmethod
    def from_dict(cls, dikt) -> 'CarInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CarInfo of this CarInfo.  # noqa: E501
        :rtype: CarInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CarInfo.


        :return: The id of this CarInfo.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CarInfo.


        :param id: The id of this CarInfo.
        :type id: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def license_plate(self):
        """Gets the license_plate of this CarInfo.


        :return: The license_plate of this CarInfo.
        :rtype: str
        """
        return self._license_plate

    @license_plate.setter
    def license_plate(self, license_plate):
        """Sets the license_plate of this CarInfo.


        :param license_plate: The license_plate of this CarInfo.
        :type license_plate: str
        """
        if license_plate is None:
            raise ValueError("Invalid value for `license_plate`, must not be `None`")  # noqa: E501

        self._license_plate = license_plate

    @property
    def driver_name(self):
        """Gets the driver_name of this CarInfo.


        :return: The driver_name of this CarInfo.
        :rtype: str
        """
        return self._driver_name

    @driver_name.setter
    def driver_name(self, driver_name):
        """Sets the driver_name of this CarInfo.


        :param driver_name: The driver_name of this CarInfo.
        :type driver_name: str
        """
        if driver_name is None:
            raise ValueError("Invalid value for `driver_name`, must not be `None`")  # noqa: E501

        self._driver_name = driver_name

    @property
    def token(self):
        """Gets the token of this CarInfo.


        :return: The token of this CarInfo.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CarInfo.


        :param token: The token of this CarInfo.
        :type token: str
        """

        self._token = token
